(* File generated by the BNF Converter (bnfc 2.9.4.1). *)

open Lexing

let parse (c : in_channel) : AbsStella.stellaIdent list =
    let lexbuf = Lexing.from_channel c
    in
    try
      ParStella.pStellaIdent_list LexStella.token lexbuf
    with
      Parsing.Parse_error ->
        let start_pos = Lexing.lexeme_start_p lexbuf
        and end_pos   = Lexing.lexeme_end_p   lexbuf
        in  raise (BNFC_Util.Parse_error (start_pos, end_pos))
;;

let showTree (t : AbsStella.stellaIdent list) : string =
    "[Abstract syntax]\n\n"^
    (fun x -> ShowStella.show (ShowStella.showList ShowStella.showStellaIdent x)) t^
    "\n\n"^ "[Linearized tree]\n\n"^
    PrintStella.printTree PrintStella.prtStellaIdentListBNFC t^ "\n"
;;

let main () =
    let channel =
        if Array.length Sys.argv > 1 then open_in Sys.argv.(1)
        else stdin
    in
    try print_string (showTree (parse channel));
        flush stdout;
        exit 0
    with BNFC_Util.Parse_error (start_pos, end_pos) ->
        Printf.printf "Parse error at %d.%d-%d.%d\n"
            start_pos.pos_lnum (start_pos.pos_cnum - start_pos.pos_bol + 1)
            end_pos.pos_lnum (end_pos.pos_cnum - end_pos.pos_bol + 1);
        exit 1
;;

main ();;
